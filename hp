{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### SANDBOX for code development"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import packages\n",
    "from fuzzywuzzy import fuzz\n",
    "from fuzzywuzzy import process\n",
    "import pandas as pd\n",
    "import nltk\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import os, os.path\n",
    "import re\n",
    "import seaborn as sns\n",
    "from tqdm import tqdm_notebook\n",
    "\n",
    "#import custom modules\n",
    "import prep.prep_data as prep\n",
    "import prep.prep_cv as cv\n",
    "import model.fuzzy as fz\n",
    "\n",
    "#magik\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#setup globals\n",
    "#setup directories\n",
    "CWD = os.getcwd()\n",
    "HOME_DIR = os.path.abspath(os.path.join(CWD, os.pardir))\n",
    "DATA_DIR = HOME_DIR + \"/data\"\n",
    "DATA_FILENAME = \"housing_data.csv\"\n",
    "RESULTS_DIR = HOME_DIR + \"/results\"\n",
    "\n",
    "#setup lists of vars to work with\n",
    "STR_VARS = ['housing_roof', 'housing_wall', 'housing_floor']\n",
    "NUM_VARS = [s + '_num' for s in STR_VARS]\n",
    "RANK_VARS = [s + '_rank' for s in STR_VARS]\n",
    "\n",
    "#which variable do you want to predictn (currently: floor/wall/roof)\n",
    "DEP_VAR = \"housing_roof\"\n",
    "PRED_VAR = DEP_VAR + \"_rank\" #will always be using the strings to predict ranking\n",
    "\n",
    "#setup a filter to select which surveys you want to work with\n",
    "SVY_FILTER = ['MACRO_DHS']\n",
    "\n",
    "#analytical options\n",
    "CV_SAMPLE_PCT = .2 #hold out x% for testing\n",
    "CV_SAMPLE_WT = \"N\" #which variable, if any, do you want to use to weight your test sample\n",
    "CV_FOLDS = 3 #use a x-fold cross-validation env\n",
    "\n",
    "#garbage lists\n",
    "STR_GARBAGE = ['nan', 'other', 'not a dejure resident', 'not dejure resident']\n",
    "RANK_GARBAGE = ['4', '5', '6', '7', '8', '9', 'n']\n",
    "\n",
    "#dictionaries\n",
    "PRED_DICT = {'natural':'1', 'rudimentary':'2', 'finished':'3'} #map categories back to ranks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "~begin reading\n",
      "data read!\n",
      "~begin cleaning\n",
      "data clean!\n",
      "~applying filter\n"
     ]
    }
   ],
   "source": [
    "df = prep.read_then_clean(DATA_DIR + \"/\" + DATA_FILENAME, STR_VARS, SVY_FILTER)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'nan': nan, 'other': nan, 'not a dejure resident': nan, 'not dejure resident': nan}\n",
      "removing garbage from  housing_roof\n",
      "removing garbage from  housing_wall\n",
      "removing garbage from  housing_floor\n",
      "defining ranking for  housing_roof_num\n",
      "defining ranking for  housing_wall_num\n",
      "defining ranking for  housing_floor_num\n",
      "{'4': nan, '5': nan, '6': nan, '7': nan, '8': nan, '9': nan, 'n': nan}\n",
      "removing garbage from  housing_roof_rank\n",
      "removing garbage from  housing_wall_rank\n",
      "removing garbage from  housing_floor_rank\n",
      "sampling df, iteration # 0\n",
      "sampling df, iteration # 1\n",
      "sampling df, iteration # 2\n"
     ]
    }
   ],
   "source": [
    "df_clean = prep.remove_garbage_codes(df, STR_VARS, STR_GARBAGE)\n",
    "df_clean = prep.extract_ranking(df_clean, NUM_VARS)\n",
    "df_clean = prep.remove_garbage_codes(df_clean, RANK_VARS, RANK_GARBAGE)\n",
    "df_clean = df_clean.dropna(subset=[DEP_VAR])\n",
    "df_clean = filter_one_word_materials(df_clean, DEP_VAR)\n",
    "df_clean = df_clean[df_clean[DEP_VAR].isin(check_if_english(df_clean,DEP_VAR))]\n",
    "train_list = cv.cv_censor_col(df_clean, PRED_VAR, CV_SAMPLE_PCT, CV_SAMPLE_WT, CV_FOLDS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working on cv loop # 0\n",
      "building corpus for rank # 1\n",
      "building corpus for rank # 2\n",
      "building corpus for rank # 3\n",
      "extracting unknown strings\n",
      "need to classify 33 unknown strings\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "module 'model.fuzzy' has no attribute 'semantic_similarity_scan'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-160c93918613>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcv_distrib\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv_preds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv_results\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfuzzy_semantic_cv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mDEP_VAR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mPRED_DICT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-13-f1336e99ea57>\u001b[0m in \u001b[0;36mfuzzy_semantic_cv\u001b[0;34m(cv_list, base_var, rank_dictionary, subset, threshold)\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m         \u001b[0;31m#find distribution of scores for each string\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 42\u001b[0;31m         \u001b[0mdistrib\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfz\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msemantic_similarity_scan\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0midk_strings\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr_list_unique\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     43\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     44\u001b[0m         \u001b[0;31m#TODO, output plots of distribution for analysis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: module 'model.fuzzy' has no attribute 'semantic_similarity_scan'"
     ]
    }
   ],
   "source": [
    "cv_distrib, cv_preds, cv_results, cv_df = fuzzy_semantic_cv(train_list, DEP_VAR, PRED_DICT)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "building corpus for rank # 1\n",
      "building corpus for rank # 2\n",
      "building corpus for rank # 3\n",
      "extracting unknown strings\n",
      "need to classify 32 unknown strings\n"
     ]
    }
   ],
   "source": [
    "from fuzzywuzzy import fuzz\n",
    "from fuzzywuzzy import process\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from tqdm import tqdm_notebook\n",
    "import model.fuzzy as fz\n",
    "    \n",
    "    #setup objects\n",
    "rank_var = base_var + '_rank'\n",
    "og_var = rank_var + '_og'\n",
    "    \n",
    "    #TODO validate syntax\n",
    "cv_distrib = []\n",
    "cv_preds = []\n",
    "cv_results = []\n",
    "cv_df = []\n",
    "    \n",
    "rank_values = list(rank_dictionary.values())\n",
    "rank_keys = list(rank_dictionary.keys())\n",
    "\n",
    "\n",
    "cv_list = train_list\n",
    "rank_dictionary = PRED_DICT\n",
    "str_list, idk_strings = fz.build_corpus(train_list[1], 'housing_roof', 'housing_roof_rank', ['1', '2', '3'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "str_list_unique = []\n",
    "for x in range(3):\n",
    "    str_list_unique.append(np.unique(str_list[x]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "analyzing... metal\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... cement\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... wood\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... slate\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... cardboard\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... sod\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... straw\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... tole\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... earth\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... leaves\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... tile\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... shingles\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... tin\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... bamboo\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... concrete\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... calamine\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... zinc\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... yagua\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... asbestos\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... plywood\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... thatch\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... slab\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... mud\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... tar\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... mat\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... skin\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... dung\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... carton\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... tarpaulin\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... grass\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... banco\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n",
      "analyzing... aluminium\n",
      "~>corpus# 0\n",
      "~>corpus# 1\n",
      "~>corpus# 2\n"
     ]
    }
   ],
   "source": [
    "distrib = semantic_similarity_scan(idk_strings,str_list_unique)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         word    natural  rudimentary   finished\n",
      "0       metal   0.578571     0.757576   0.592075\n",
      "1       metal   1.065909     0.369048   0.369048\n",
      "2       metal   2.790090     0.578571   0.000000\n",
      "3       metal   2.155567     0.424242   2.412121\n",
      "4       metal   4.014286     0.624242   1.065909\n",
      "5       metal   1.011905     0.543590   4.800000\n",
      "6       metal   1.476995     2.412121   1.291775\n",
      "7       metal   1.823876     1.065909   0.290909\n",
      "8       metal   1.126173     0.563034   1.563900\n",
      "9       metal   1.005578     2.259482   1.823876\n",
      "10      metal   2.177306     0.265152   1.126173\n",
      "11      metal   0.000000     2.301454   1.005578\n",
      "12      metal        NaN     0.858741   2.142580\n",
      "13      metal        NaN     0.265152   0.243590\n",
      "14      metal        NaN     1.126173   2.177306\n",
      "15      metal        NaN     1.005578   1.090909\n",
      "16      metal        NaN     2.142580        NaN\n",
      "17      metal        NaN     2.177306        NaN\n",
      "18      metal        NaN     1.090909        NaN\n",
      "0      cement   1.421678     0.860390   1.702137\n",
      "1      cement   3.313240     0.855769   0.855769\n",
      "2      cement   6.936650     1.421678   0.000000\n",
      "3      cement   5.392777     0.974675  12.684366\n",
      "4      cement  10.450558     1.508009   3.313240\n",
      "5      cement   2.326893     1.433208   3.062121\n",
      "6      cement   3.460262    12.684366   3.632441\n",
      "7      cement   4.479452     3.313240   0.896970\n",
      "8      cement   3.202144     1.423291   4.225733\n",
      "9      cement   2.924756     6.242359   4.479452\n",
      "10     cement   5.483827     0.796703   3.202144\n",
      "..        ...        ...          ...        ...\n",
      "8       banco   0.000000     0.000000   0.000000\n",
      "9       banco   0.000000     0.000000   0.000000\n",
      "10      banco   0.000000     0.000000   0.000000\n",
      "11      banco   0.000000     0.000000   0.000000\n",
      "12      banco        NaN     0.000000   0.000000\n",
      "13      banco        NaN     0.000000   0.000000\n",
      "14      banco        NaN     0.000000   0.000000\n",
      "15      banco        NaN     0.000000   0.000000\n",
      "16      banco        NaN     0.000000        NaN\n",
      "17      banco        NaN     0.000000        NaN\n",
      "18      banco        NaN     0.000000        NaN\n",
      "0   aluminium   0.191667     1.000000   0.194444\n",
      "1   aluminium   0.090909     0.125000   0.125000\n",
      "2   aluminium   0.792201     0.191667   0.000000\n",
      "3   aluminium   0.431818     0.142857   0.602814\n",
      "4   aluminium   0.558333     0.142857   0.090909\n",
      "5   aluminium   0.201923     0.167832   0.666667\n",
      "6   aluminium   0.396368     0.602814   0.351874\n",
      "7   aluminium   0.396825     0.090909   0.090909\n",
      "8   aluminium   0.294185     0.111111   0.362179\n",
      "9   aluminium   0.238095     0.553114   0.396825\n",
      "10  aluminium   0.699950     0.083333   0.294185\n",
      "11  aluminium   0.000000     0.560689   0.238095\n",
      "12  aluminium        NaN     0.174242   0.576923\n",
      "13  aluminium        NaN     0.083333   0.076923\n",
      "14  aluminium        NaN     0.294185   0.699950\n",
      "15  aluminium        NaN     0.238095   0.333333\n",
      "16  aluminium        NaN     0.576923        NaN\n",
      "17  aluminium        NaN     0.699950        NaN\n",
      "18  aluminium        NaN     0.333333        NaN\n",
      "\n",
      "[608 rows x 4 columns]\n"
     ]
    }
   ],
   "source": [
    "print(distrib)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "gp_distrib = distrib.groupby('word').sum()\n",
    "gp_distrib['sum_score'] = gp_distrib['natural'] + gp_distrib['rudimentary'] + gp_distrib['finished']\n",
    "gp_distrib_sub = gp_distrib [gp_distrib.sum_score != 0]\n",
    "list_non_zero = list(gp_distrib_sub.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>natural</th>\n",
       "      <th>rudimentary</th>\n",
       "      <th>finished</th>\n",
       "      <th>sum_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>word</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>aluminium</th>\n",
       "      <td>4.292274</td>\n",
       "      <td>6.172246</td>\n",
       "      <td>5.101032</td>\n",
       "      <td>15.565552</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>asbestos</th>\n",
       "      <td>4.163675</td>\n",
       "      <td>5.776040</td>\n",
       "      <td>5.136983</td>\n",
       "      <td>15.076697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bamboo</th>\n",
       "      <td>10.085623</td>\n",
       "      <td>10.832649</td>\n",
       "      <td>8.063150</td>\n",
       "      <td>28.981422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>calamine</th>\n",
       "      <td>4.646639</td>\n",
       "      <td>6.295622</td>\n",
       "      <td>4.887143</td>\n",
       "      <td>15.829405</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cardboard</th>\n",
       "      <td>4.729973</td>\n",
       "      <td>7.212289</td>\n",
       "      <td>4.803810</td>\n",
       "      <td>16.746071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>carton</th>\n",
       "      <td>7.828977</td>\n",
       "      <td>11.366821</td>\n",
       "      <td>8.281800</td>\n",
       "      <td>27.477599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cement</th>\n",
       "      <td>49.392236</td>\n",
       "      <td>57.836163</td>\n",
       "      <td>53.052844</td>\n",
       "      <td>160.281243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>concrete</th>\n",
       "      <td>28.753347</td>\n",
       "      <td>27.749989</td>\n",
       "      <td>25.893950</td>\n",
       "      <td>82.397286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dung</th>\n",
       "      <td>19.164962</td>\n",
       "      <td>20.449793</td>\n",
       "      <td>15.818023</td>\n",
       "      <td>55.432779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>earth</th>\n",
       "      <td>58.826302</td>\n",
       "      <td>53.753289</td>\n",
       "      <td>47.374006</td>\n",
       "      <td>159.953598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>grass</th>\n",
       "      <td>77.689245</td>\n",
       "      <td>63.566372</td>\n",
       "      <td>56.186359</td>\n",
       "      <td>197.441975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>leaves</th>\n",
       "      <td>181.254999</td>\n",
       "      <td>146.007693</td>\n",
       "      <td>130.154289</td>\n",
       "      <td>457.416981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mat</th>\n",
       "      <td>46.100626</td>\n",
       "      <td>57.722444</td>\n",
       "      <td>42.793652</td>\n",
       "      <td>146.616722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>metal</th>\n",
       "      <td>19.226256</td>\n",
       "      <td>20.830860</td>\n",
       "      <td>21.995748</td>\n",
       "      <td>62.052864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mud</th>\n",
       "      <td>28.675373</td>\n",
       "      <td>23.974544</td>\n",
       "      <td>21.614948</td>\n",
       "      <td>74.264866</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>plywood</th>\n",
       "      <td>4.351554</td>\n",
       "      <td>6.319746</td>\n",
       "      <td>4.783508</td>\n",
       "      <td>15.454808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>shingles</th>\n",
       "      <td>25.662548</td>\n",
       "      <td>27.956763</td>\n",
       "      <td>29.564557</td>\n",
       "      <td>83.183868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>skin</th>\n",
       "      <td>60.329271</td>\n",
       "      <td>69.973386</td>\n",
       "      <td>53.367142</td>\n",
       "      <td>183.669799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>slab</th>\n",
       "      <td>5.183435</td>\n",
       "      <td>6.487984</td>\n",
       "      <td>6.717230</td>\n",
       "      <td>18.388649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>slate</th>\n",
       "      <td>41.352844</td>\n",
       "      <td>41.260263</td>\n",
       "      <td>43.516172</td>\n",
       "      <td>126.129279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sod</th>\n",
       "      <td>31.982070</td>\n",
       "      <td>28.009690</td>\n",
       "      <td>24.941565</td>\n",
       "      <td>84.933325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>straw</th>\n",
       "      <td>43.170978</td>\n",
       "      <td>36.315043</td>\n",
       "      <td>38.623684</td>\n",
       "      <td>118.109706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tar</th>\n",
       "      <td>16.853986</td>\n",
       "      <td>19.302740</td>\n",
       "      <td>15.169430</td>\n",
       "      <td>51.326156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tarpaulin</th>\n",
       "      <td>4.351554</td>\n",
       "      <td>6.305857</td>\n",
       "      <td>4.759699</td>\n",
       "      <td>15.417109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thatch</th>\n",
       "      <td>28.998617</td>\n",
       "      <td>30.964883</td>\n",
       "      <td>28.346154</td>\n",
       "      <td>88.309654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tile</th>\n",
       "      <td>27.231455</td>\n",
       "      <td>28.841311</td>\n",
       "      <td>26.999302</td>\n",
       "      <td>83.072069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tin</th>\n",
       "      <td>41.568075</td>\n",
       "      <td>51.041244</td>\n",
       "      <td>46.038307</td>\n",
       "      <td>138.647626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tole</th>\n",
       "      <td>3.951868</td>\n",
       "      <td>4.896745</td>\n",
       "      <td>5.156895</td>\n",
       "      <td>14.005508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>wood</th>\n",
       "      <td>38.946309</td>\n",
       "      <td>43.024517</td>\n",
       "      <td>37.987995</td>\n",
       "      <td>119.958822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zinc</th>\n",
       "      <td>13.964379</td>\n",
       "      <td>15.669156</td>\n",
       "      <td>14.664922</td>\n",
       "      <td>44.298458</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              natural  rudimentary    finished   sum_score\n",
       "word                                                      \n",
       "aluminium    4.292274     6.172246    5.101032   15.565552\n",
       "asbestos     4.163675     5.776040    5.136983   15.076697\n",
       "bamboo      10.085623    10.832649    8.063150   28.981422\n",
       "calamine     4.646639     6.295622    4.887143   15.829405\n",
       "cardboard    4.729973     7.212289    4.803810   16.746071\n",
       "carton       7.828977    11.366821    8.281800   27.477599\n",
       "cement      49.392236    57.836163   53.052844  160.281243\n",
       "concrete    28.753347    27.749989   25.893950   82.397286\n",
       "dung        19.164962    20.449793   15.818023   55.432779\n",
       "earth       58.826302    53.753289   47.374006  159.953598\n",
       "grass       77.689245    63.566372   56.186359  197.441975\n",
       "leaves     181.254999   146.007693  130.154289  457.416981\n",
       "mat         46.100626    57.722444   42.793652  146.616722\n",
       "metal       19.226256    20.830860   21.995748   62.052864\n",
       "mud         28.675373    23.974544   21.614948   74.264866\n",
       "plywood      4.351554     6.319746    4.783508   15.454808\n",
       "shingles    25.662548    27.956763   29.564557   83.183868\n",
       "skin        60.329271    69.973386   53.367142  183.669799\n",
       "slab         5.183435     6.487984    6.717230   18.388649\n",
       "slate       41.352844    41.260263   43.516172  126.129279\n",
       "sod         31.982070    28.009690   24.941565   84.933325\n",
       "straw       43.170978    36.315043   38.623684  118.109706\n",
       "tar         16.853986    19.302740   15.169430   51.326156\n",
       "tarpaulin    4.351554     6.305857    4.759699   15.417109\n",
       "thatch      28.998617    30.964883   28.346154   88.309654\n",
       "tile        27.231455    28.841311   26.999302   83.072069\n",
       "tin         41.568075    51.041244   46.038307  138.647626\n",
       "tole         3.951868     4.896745    5.156895   14.005508\n",
       "wood        38.946309    43.024517   37.987995  119.958822\n",
       "zinc        13.964379    15.669156   14.664922   44.298458"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gp_distrib_sub"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['aluminium',\n",
       " 'asbestos',\n",
       " 'bamboo',\n",
       " 'calamine',\n",
       " 'cardboard',\n",
       " 'carton',\n",
       " 'cement',\n",
       " 'concrete',\n",
       " 'dung',\n",
       " 'earth',\n",
       " 'grass',\n",
       " 'leaves',\n",
       " 'mat',\n",
       " 'metal',\n",
       " 'mud',\n",
       " 'plywood',\n",
       " 'shingles',\n",
       " 'skin',\n",
       " 'slab',\n",
       " 'slate',\n",
       " 'sod',\n",
       " 'straw',\n",
       " 'tar',\n",
       " 'tarpaulin',\n",
       " 'thatch',\n",
       " 'tile',\n",
       " 'tin',\n",
       " 'tole',\n",
       " 'wood',\n",
       " 'zinc']"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_non_zero"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "distrib_plot = distrib[distrib['word'].isin(list_non_zero)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clean[df_clean[base_var].isin(check_if_english(df_clean,base_var))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "preds = fz.fuzzy_predict(distrib, rank_keys, 'word', .5,\n",
    "                                 rank_dictionary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            natural  rudimentary  finished pred\n",
      "word                                           \n",
      "aluminium  0.157895     0.315789  0.210526    2\n",
      "asbestos   0.157895     0.263158  0.157895    2\n",
      "bamboo     0.421053     0.368421  0.368421    1\n",
      "banco      0.000000     0.000000  0.000000    1\n",
      "calamine   0.157895     0.263158  0.105263    2\n",
      "cardboard  0.157895     0.263158  0.105263    2\n",
      "carton     0.421053     0.421053  0.421053    1\n",
      "cement     0.578947     1.000000  0.789474    2\n",
      "concrete   0.526316     0.684211  0.631579    2\n",
      "dung       0.526316     0.631579  0.578947    2\n",
      "earth      0.578947     1.000000  0.789474    2\n",
      "grass      0.578947     1.000000  0.789474    2\n",
      "leaves     0.578947     1.000000  0.789474    2\n",
      "mat        0.578947     1.000000  0.789474    2\n",
      "metal      0.578947     0.789474  0.631579    2\n",
      "mud        0.578947     0.736842  0.631579    2\n",
      "plywood    0.157895     0.263158  0.105263    2\n",
      "shingles   0.578947     0.842105  0.684211    2\n",
      "skin       0.578947     1.000000  0.789474    2\n",
      "slab       0.210526     0.315789  0.315789    2\n",
      "slate      0.578947     1.000000  0.789474    2\n",
      "sod        0.578947     0.736842  0.684211    2\n",
      "straw      0.578947     1.000000  0.736842    2\n",
      "tar        0.526316     0.526316  0.578947    3\n",
      "tarpaulin  0.157895     0.263158  0.105263    2\n",
      "thatch     0.578947     0.842105  0.684211    2\n",
      "tile       0.578947     0.736842  0.684211    2\n",
      "tin        0.578947     1.000000  0.789474    2\n",
      "tole       0.105263     0.157895  0.105263    2\n",
      "wood       0.578947     1.000000  0.789474    2\n",
      "yagua      0.000000     0.000000  0.000000    1\n",
      "zinc       0.526316     0.526316  0.578947    3\n"
     ]
    }
   ],
   "source": [
    "print(preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7fcd8002d048>"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1177.88x1296 with 30 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fz.fuzzy_density(distrib_plot, 'word', \n",
    "                 ['natural', 'rudimentary', 'finished'],\n",
    "                 color_list={'natural':'r', 'rudimentary':'b', 'finished':'g'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "out = df[df['train']==0]\n",
    "out = pd.merge(out,\n",
    "                preds,\n",
    "                left_on=base_var,\n",
    "                right_on='word',\n",
    "                how='left')\n",
    "\n",
    "#calculate success rate and tabulate\n",
    "out['success'] = np.where(out[og_var] == out['pred'], 1, 0)\n",
    "success_rate = pd.crosstab(out[~pd.isnull(out['pred'])]['success'], columns='count')\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>col_0</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>success</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>26324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2489</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "col_0    count\n",
       "success       \n",
       "0        26324\n",
       "1         2489"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "success_rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def filter_one_word_materials(df, base_var):\n",
    "    \n",
    "    df_one_word = df[base_var].str.get_dummies(sep=' ').T\n",
    "    df['count_word'] = df_one_word.sum()\n",
    "    df = df [df.count_word == 1]\n",
    "    \n",
    "    return(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_if_english(df, base_var):\n",
    "    \n",
    "    from nltk.corpus import words\n",
    "    from itertools import compress\n",
    "    \n",
    "    list_material = df[base_var].unique().tolist()\n",
    "    \n",
    "    boolean = []\n",
    "    for x in range(len(list_material)):\n",
    "        boolean.append(list_material[x] in words.words())\n",
    "        \n",
    "    english_material = list(compress(list_material, boolean))\n",
    "    \n",
    "    return(english_material)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def semantic_similarity_scan(unknown_list, corpus_list):\n",
    "    \n",
    "    \"\"\"This function takes a list of materials for which the rank is unknown (i.e. a word outside our \"dictionnary\")\n",
    "    as input and calculates a score of semantic similarity with each word of the list of known material (our \"dictionnary\").\n",
    "\n",
    "    Args:\n",
    "        unknown_list (list of str): This is a list of strings whose rank is unknown\n",
    "        corpus_list (list of str): This is a list of the strings for which the rank is known. The strings are classified\n",
    "        within one of three categories of materials.\n",
    "\n",
    "    Returns:\n",
    "        distrib (DataFrame): The distribution of the similarity scores between each unknown material in the unknown list and known material\n",
    "        in the corpus_list.\n",
    "\n",
    "    \"\"\"\n",
    "    \n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    import nltk\n",
    "    from nltk.corpus import wordnet as wn\n",
    "    from fuzzywuzzy import fuzz\n",
    "    from fuzzywuzzy import process\n",
    "\n",
    "    distrib = []\n",
    "\n",
    "        #loop over each unknown string\n",
    "    for x in range(len(unknown_list)): \n",
    "        unknown_str = unknown_list[x]\n",
    "        print('analyzing...', unknown_str)\n",
    "        unknw_syn = wn.synsets(unknown_str)\n",
    "        out = []\n",
    "        #loop over each corpus to compute similarity scores for all words in a given housing quality score\n",
    "        for y in range(len(corpus_list)):\n",
    "            print('~>corpus#', y)\n",
    "            corpus = corpus_list[y]\n",
    "\n",
    "\n",
    "            scores = []\n",
    "                #loop over each word and compute the similarity score\n",
    "            for z in range(len(corpus)): #tqdm=progress bar\n",
    "                list_syn = wn.synsets(corpus[z])\n",
    "                score = 0\n",
    "                for s1 in unknw_syn:\n",
    "                    score = score + sum([s1.path_similarity(s2) for s2 in list_syn if s1.path_similarity(s2) is not None])\n",
    "                scores.append(score)\n",
    "\n",
    "            out.append(scores) #append scores to create a distribution for the entire corpus\n",
    "\n",
    "            #append distributions of scores\n",
    "        distrib.append(pd.DataFrame({'word': unknown_str, \n",
    "                                    'natural':pd.Series(out[0]), \n",
    "                                    'rudimentary':pd.Series(out[1]), \n",
    "                                    'finished':pd.Series(out[2]) #note series method used to overcome differing lengths\n",
    "                                    }))    \n",
    "    return(pd.concat(distrib))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fuzzy_semantic_cv(cv_list, base_var, rank_dictionary, subset=None, threshold=.5):\n",
    "\n",
    "    #import packages\n",
    "    from fuzzywuzzy import fuzz\n",
    "    from fuzzywuzzy import process\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "\n",
    "    #import custom modules\n",
    "    import model.fuzzy as fz\n",
    "    \n",
    "    #setup objects\n",
    "    rank_var = base_var + '_rank'\n",
    "    og_var = rank_var + '_og'\n",
    "    \n",
    "    #TODO validate syntax\n",
    "    rank_values = list(rank_dictionary.values())\n",
    "    rank_keys = list(rank_dictionary.keys())\n",
    "    \n",
    "    #create lists to store loop outputs\n",
    "    cv_distrib = []\n",
    "    cv_preds = []\n",
    "    cv_results = []\n",
    "    cv_df = []\n",
    "    \n",
    "    #loop over each cross validation:\n",
    "    for i in range(len(cv_list)):\n",
    "        \n",
    "        print('working on cv loop #', i)\n",
    "        df = cv_list[i].copy() #subset the cv list to the current df\n",
    "\n",
    "        #build corpus of known and unknown strings\n",
    "        str_list, idk_strings = fz.build_corpus(df, base_var, rank_var, rank_values)\n",
    "        str_list_unique = []\n",
    "        for x in range(3):\n",
    "            str_list_unique.append(np.unique(str_list[x]))\n",
    "        #subset the unknown strings to allow for faster testing\n",
    "        if subset != None:\n",
    "            idk_strings = idk_strings[subset]\n",
    "        \n",
    "        #find distribution of scores for each string\n",
    "        distrib = fz.semantic_similarity_scan(idk_strings, str_list_unique)\n",
    "        \n",
    "        #TODO, output plots of distribution for analysis\n",
    "\n",
    "        #predict class based on probability of exceeding similarity cutoff\n",
    "        preds = fz.fuzzy_predict(distrib, rank_keys, 'word', threshold,\n",
    "                                 rank_dictionary)\n",
    "\n",
    "        #merge results back on the test data to validate\n",
    "        out = df[df['train']==0]\n",
    "        out = pd.merge(out,\n",
    "                       preds,\n",
    "                       left_on=base_var,\n",
    "                       right_on='word',\n",
    "                       how='left')\n",
    "\n",
    "        #calculate success rate and tabulate\n",
    "        out['success'] = np.where(out[og_var] == out['pred'], 1, 0)\n",
    "        success_rate = pd.crosstab(out[~pd.isnull(out['pred'])]['success'], columns='count')\n",
    "        \n",
    "        #append results to prep for next loop\n",
    "        cv_distrib.append(distrib)\n",
    "        cv_preds.append(preds)\n",
    "        cv_results.append(success_rate)\n",
    "        cv_df.append(out)\n",
    "        \n",
    "    return(cv_distrib, cv_preds, cv_results, cv_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting ./model/fuzzy.py\n"
     ]
    }
   ],
   "source": [
    "%%file ./model/fuzzy.py\n",
    "\n",
    "#define function to replace meaningless values with NaNs\n",
    "# def extract_ranking(df, vars_to_clean):\n",
    "#     \"\"\"This helper function is used to \n",
    "\n",
    "#     Args:\n",
    "#     df (pandas df): This is a pandas df that has \n",
    "#     dep_var (str): This is the name of a column\n",
    "\n",
    "#     Returns:\n",
    "#         df_out: \n",
    "        \n",
    "#     TODO: ?\n",
    "\n",
    "#     \"\"\"\n",
    "        \n",
    "#     df_out = df.copy()\n",
    "\n",
    "#     #output a clean dataset\n",
    "#     return \n",
    "\n",
    "def build_corpus(df, str_var, rank_var, rank_list):\n",
    "    \n",
    "    #import necessary modules\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    from fuzzywuzzy import fuzz\n",
    "    from fuzzywuzzy import process\n",
    "    \n",
    "    out = []\n",
    "    \n",
    "    for x in rank_list:\n",
    "        print(\"building corpus for rank #\", x)\n",
    "        out.append(df[df[rank_var]==x][str_var].values)    \n",
    "\n",
    "    print(\"extracting unknown strings\")\n",
    "    other = df[~df[rank_var].isin(rank_list)][str_var].unique()\n",
    "    other = other[~pd.isnull(other)] #cant classify NaN\n",
    "    print(\"need to classify\", len(other), \"unknown strings\")\n",
    "\n",
    "    return(out, other)\n",
    "\n",
    "def fuzzy_scan(unknown_list, corpus_list):\n",
    "    \n",
    "    #import necessary modules\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    from fuzzywuzzy import fuzz\n",
    "    from fuzzywuzzy import process\n",
    "    from tqdm import tqdm_notebook\n",
    "\n",
    "    distrib = []\n",
    "\n",
    "    #loop over each unknown string\n",
    "    for x in tqdm_notebook(range(len(unknown_list)), desc=\"classifying unknown strings\", leave=False): \n",
    "        unknown_str = unknown_list[x]\n",
    "        print('analyzing...', unknown_str)\n",
    "\n",
    "        out = []\n",
    "        #loop over each corpus to compute similarity scores for all words in a given housing quality score\n",
    "        for y in range(len(corpus_list)):\n",
    "            print('~>corpus#', y)\n",
    "            corpus = corpus_list[y]\n",
    "\n",
    "\n",
    "            scores = []\n",
    "            #loop over each word and compute the similarity score\n",
    "            for z in range(len(corpus)): #tqdm=progress bar\n",
    "                scores.append(fuzz.WRatio(unknown_str, corpus[z]))\n",
    "\n",
    "            out.append(scores) #append scores to create a distribution for the entire corpus\n",
    "\n",
    "        #append distributions of scores\n",
    "        distrib.append(pd.DataFrame({'word': unknown_str, \n",
    "                                     'natural':pd.Series(out[0]), \n",
    "                                     'rudimentary':pd.Series(out[1]), \n",
    "                                     'finished':pd.Series(out[2]) #note series method used to overcome differing lengths\n",
    "                                    }))\n",
    "\n",
    "\n",
    "    return(pd.concat(distrib))\n",
    "\n",
    "def fuzzy_predict(df, var_list, grouping, cutoff, dictionary):\n",
    "    \n",
    "    #calculate the probability that a classification score exceeds cutoff\n",
    "    #out = df.groupby(grouping)[var_list].apply(lambda c: (c>cutoff).sum()/len(c))\n",
    "    \n",
    "    #return column w/ max value and map to rank with dictionary\n",
    "    out['pred'] = out[var_list].idxmax(axis=1).map(dictionary) \n",
    "    \n",
    "    return(out)\n",
    "\n",
    "def fuzzy_transform(df, var_list, grouping, fx, stub):\n",
    "\n",
    "    for var in var_list:\n",
    "\n",
    "        print('calculating prob for...', var)\n",
    "\n",
    "        kwargs = {var+stub : lambda x: x[var]/x.groupby(grouping)[var].transform(fx)}\n",
    "        df = df.assign(**kwargs)\n",
    "\n",
    "    return(df)\n",
    "\n",
    "def fuzzy_density(df, facet, var_list, color_list, variant=\"\", cutoff=None):\n",
    "    \n",
    "    #import necessary modules\n",
    "    import pandas as pd\n",
    "    import matplotlib.pyplot as plt\n",
    "    import numpy as np\n",
    "    import seaborn as sns\n",
    "\n",
    "    g = sns.FacetGrid(df, col=facet, col_wrap=5, height=3)\n",
    "\n",
    "    for var in var_list:\n",
    "        ('plotting...', var)\n",
    "        g = g.map(sns.kdeplot, var+variant, shade=True, color=color_list[var])\n",
    "        #add cutoff line if provided\n",
    "        if cutoff != None:\n",
    "            g = g.map(plt.axvline, x=cutoff, color='grey', linestyle='dashed')\n",
    "        \n",
    "    g = g.add_legend()\n",
    "    \n",
    "    return(g)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%file ./prep/prep_cv.py\n",
    "\n",
    "#define necessary helper functions\n",
    "def cv_censor_col(df, colname, pct=.2, weight_var=None, reps=5):\n",
    "    \n",
    "    \"\"\"This function is used to create pandas dfs where a specified % of the values in a column have been censored\n",
    "    and replaced with NaN, so that they can be predicted in a cross-validation methodology. It returns a list of such\n",
    "    dfs that is the length of the reps argument.\n",
    "\n",
    "    Args:\n",
    "        df (pandas df): This is a pandas df that has columns with garbage values to be removed.\n",
    "        colname (str): This is a string indicating the name of a column that you want to censor and later predict.\n",
    "        pct (float): This is a value between 0-1 that indicates the fraction of values you want to censor. Default = 20%\n",
    "        weight_var (str): This is a string indicating the column name is used to weighted the sample. Default = No weight.\n",
    "        reps (int): This is an integer indicating the number of different training datasets to create. Default = 5x\n",
    "\n",
    "    Returns:\n",
    "        df_clean: This function returns a pandas df where the garbage codes have been replaced with NaN.\n",
    "        \n",
    "    TODO: ?\n",
    "\n",
    "    \"\"\"\n",
    "    \n",
    "    #import packages\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    \n",
    "    out = []\n",
    "    \n",
    "    for x in range(reps):\n",
    "            \n",
    "        print(\"sampling df, iteration #\", x)\n",
    "    \n",
    "        #first archive your old column in order to test later\n",
    "        new_df = df.copy()\n",
    "        new_df[colname + '_og'] = new_df[colname]\n",
    "        new_df['train'] = 1 #set column to specify whether training or test data\n",
    "\n",
    "        #draw a weighted sample if weight var is specified\n",
    "        if weight_var != None:\n",
    "            df_censor = new_df.sample(frac=pct, weights=weight_var)\n",
    "        else:\n",
    "            df_censor = new_df.sample(frac=pct)\n",
    "            \n",
    "        #now replace the sampled column with missing values in order to try and predict\n",
    "        #note that replacement is only done on the sampled indices\n",
    "        df_censor['train'] = 0 #note that this sample is no longer training data (it is test)\n",
    "        df_censor[colname] = \"replace_me\"\n",
    "        new_df.update(df_censor, overwrite=True)\n",
    "        new_df[colname].replace(\"replace_me\", np.nan, inplace=True)\n",
    "        #TODO unsure if this is pythonic method but it seems like df.update won't replace values with NaN, \n",
    "        #as such, need to do this workaround\n",
    "        \n",
    "        #store the result (df with columns censored)\n",
    "        out.append(new_df)\n",
    "    \n",
    "    #return the list of sampled dfs\n",
    "    return(out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%file ./prep/prep_data.py\n",
    "#define necessary helper functions\n",
    "def clean_text(text):\n",
    "    \"\"\"This function is used to clean a selection of text. \n",
    "    It uses several regular expressions and built in text commands in order to remove commonly seen \n",
    "    errors,\n",
    "    nonsense values, \n",
    "    punctuation, \n",
    "    digits, and \n",
    "    extra whitespace.\n",
    "\n",
    "    Args:\n",
    "        text (str): This is a text value that needs to be cleaned.\n",
    "\n",
    "    Returns:\n",
    "        text: This function returns a cleaned version of the input text.\n",
    "        \n",
    "    TODO: Add functionality to impute a selected value for NaN or missing values?\n",
    "\n",
    "    \"\"\"\n",
    "    #import necessary modules\n",
    "    import re\n",
    "    \n",
    "    #force all vals in series to string\n",
    "    text = str(text)\n",
    "    \n",
    "    #first remove uppercase\n",
    "    text = text.lower()\n",
    "    \n",
    "    #remove common errors\n",
    "    text = re.sub(r\"\\[.]\", \"\", text) \n",
    "    text = re.sub(r\"\\<ff>\", \"\", text)   \n",
    "    text = re.sub(r\"\\<fb>\", \"\", text)\n",
    "    text = re.sub(r\"\\<a\\d>\", \"\", text)   \n",
    "    text = re.sub(r\"\\<c\\d>\", \"\", text)   \n",
    "    text = re.sub(r\"\\<d\\d>\", \"\", text)\n",
    "    text = re.sub(r\"\\<e\\d>\", \"\", text)   \n",
    "    text = re.sub(r\"\\<f\\d>\", \"\", text)   \n",
    "    text = re.sub(r\"\\d+\\.\", \"\", text)\n",
    "\n",
    "    # remove the characters [\\], ['] and [\"]\n",
    "    text = re.sub(r\"\\\\\", \"\", text)    \n",
    "    text = re.sub(r\"\\'\", \"\", text)    \n",
    "    text = re.sub(r\"\\\"\", \"\", text)   \n",
    "\n",
    "    # replace punctuation characters with spaces\n",
    "    filters='!\"\\'#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~\\t\\n'\n",
    "    translate_dict = dict((c, \" \") for c in filters)\n",
    "    translate_map = str.maketrans(translate_dict)\n",
    "    text = text.translate(translate_map)\n",
    "    \n",
    "    # remove any remaining digit codes\n",
    "    text = re.sub(r\"\\d+\", \"\", text)\n",
    "    \n",
    "    # remove any leading/trailing/duplicate whitespace\n",
    "    text = re.sub(' +', ' ', text.strip())\n",
    "    \n",
    "    return text\n",
    "    \n",
    "#define master function\n",
    "def read_then_clean(file_path, vars_to_clean, filter_series=None):\n",
    "    \"\"\"This is the master function for this module. It uses the previously defined helper functions,\n",
    "    in order to output a clean dataset for user. It reads in a selected .csv file from a given filepath,\n",
    "    and applies the previously defined cleaning functions to a list of variables provided by user.\n",
    "    \n",
    "    It can also optionally filter the df based on the survey series or TODO language.\n",
    "\n",
    "    Args:\n",
    "        file_path (str): This is a string indicating which file that you want to read in.\n",
    "        vars_to_clean (list): This is a list of strings that indicate which columns you want to clean.\n",
    "        filter_series (list): This is a list of strings that indicate which survey series to keep.\n",
    "\n",
    "    Returns:\n",
    "        df_clean: This is a pandas df that has columns of text values that have been cleaned using the helper function.\n",
    "        \n",
    "    TODO: Is it better to return an obj called df_clean to be more explicit to user?\n",
    "\n",
    "    \"\"\"\n",
    "    #import necessary modules\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    \n",
    "    #read in your data\n",
    "    print(\"~begin reading\")\n",
    "    df_raw = pd.read_csv(file_path, low_memory=False)\n",
    "    min_nrow = len(df_raw) #save the row count to test after cleaning and verify that rows are not being dropped\n",
    "    print(\"data read!\")\n",
    "    \n",
    "    #cleanup\n",
    "    print(\"~begin cleaning\")\n",
    "    df_clean = df_raw.copy()\n",
    "    for var in vars_to_clean:\n",
    "        df_clean[var] = df_clean[var].apply(clean_text)\n",
    "    print(\"data clean!\")\n",
    "    \n",
    "    # Verify that the minimum rowcount continues to be met\n",
    "    if len(df_clean) < min_nrow:\n",
    "        class RowCountException(Exception):\n",
    "            \"\"\"Custom exception class.\n",
    "            \n",
    "            This exception is raised when the minimum row is unmet.\n",
    "\n",
    "            \"\"\"\n",
    "            pass\n",
    "        \n",
    "        raise RowCountException(\"Minimum number of rows were not returned after cleaning. Data is being lost!\")\n",
    "        \n",
    "    # Filter data if filter arguments are provided by user\n",
    "    if filter_series != None:\n",
    "        print(\"~applying filter\")\n",
    "        df_clean = df_clean[df_clean['survey_series'].isin(filter_series)]\n",
    "        \n",
    "    #output a clean dataset\n",
    "    return df_clean\n",
    "\n",
    "#define function to replace meaningless values with NaNs\n",
    "def remove_garbage_codes(df, vars_to_clean, garbage_list):\n",
    "    \"\"\"This helper function is used to remove garbage values from a pandas df, replacing them with NaN.\n",
    "\n",
    "    Args:\n",
    "    df (pandas df): This is a pandas df that has columns with garbage values to be removed.\n",
    "    vars_to_clean (list): This is a list of strings that indicate which columns you want to clean.\n",
    "    garbage_list (list): This is a list of strings that indicate which garbage values to replace with NaN\n",
    "\n",
    "    Returns:\n",
    "        df_clean: This function returns a pandas df where the garbage codes have been replaced with NaN.\n",
    "        \n",
    "    TODO: ?\n",
    "\n",
    "    \"\"\"\n",
    "    \n",
    "    #import necessary modules\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    \n",
    "    df_clean = df.copy()\n",
    "    \n",
    "    # build dictionary to map all garbage values to NaN\n",
    "    garb_dict = {}\n",
    "    for string in garbage_list:\n",
    "        garb_dict[string] = np.nan\n",
    "    \n",
    "    print(garb_dict)\n",
    "    \n",
    "    for var in vars_to_clean:\n",
    "        print(\"removing garbage from \", var)\n",
    "        df_clean[var].replace(garb_dict, inplace=True)\n",
    "        \n",
    "    #output a clean dataset\n",
    "    return df_clean\n",
    "\n",
    "#define function to replace meaningless values with NaNs\n",
    "def extract_ranking(df, vars_to_clean):\n",
    "    \"\"\"This helper function is used to extract the ordinal rankings from numerical coding.\n",
    "\n",
    "    Args:\n",
    "    df (pandas df): This is a pandas df that has columns with garbage values to be removed.\n",
    "    vars_to_rank (list): This is a list of strings that indicate which columns you want to extract ranks from.\n",
    "\n",
    "    Returns:\n",
    "        df_out: This function returns a pandas df with new vars added with the ordinal rank cols defined.\n",
    "        \n",
    "    TODO: ?\n",
    "\n",
    "    \"\"\"\n",
    "    \n",
    "    #import necessary modules\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    import re\n",
    "    \n",
    "    df_out = df.copy()\n",
    "    \n",
    "    for var in vars_to_clean:\n",
    "        print(\"defining ranking for \", var)\n",
    "        newcol = re.sub(\"_num\", \"_rank\", var) \n",
    "        df_out[newcol] = df_out[var].astype(str).str[0]\n",
    "\n",
    "    #output a clean dataset\n",
    "    return df_out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%file ./tests/test_prep.py\n",
    "#write tests\n",
    "\"\"\"This is a module used to test a module: \"prep.py\" and its relevant functions read_then_clean and clean_text\n",
    "\n",
    "read_then_clean is a function that takes a csv with messy string values and \n",
    "creates then cleans a pandas df\n",
    "using clean_text\n",
    "\n",
    "This module tests that function by ensuring that it returns expected exceptions and\n",
    "does not contain unexpected values.\n",
    "\"\"\"\n",
    "# import packages\n",
    "import pytest\n",
    "import pandas as pd\n",
    "import re\n",
    "\n",
    "#import custom modules fpr testing\n",
    "import prep.prep_data as prep\n",
    "\n",
    "#set globals for tests\n",
    "FILEPATH = '../data/housing_data.csv'\n",
    "CLEAN_COLS = ['housing_roof', 'housing_wall', 'housing_floor']\n",
    "DIGITS = str([str(x) for x in range(100 + 1)])\n",
    "PUNCT = '!\"\\'#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~\\t\\n'\n",
    "SPACE = '     '\n",
    "\n",
    "# if you compile the regex string first, it's even faster\n",
    "re_dig = re.compile('\\d')\n",
    "re_punct = re.compile('\\W+')\n",
    "re_white = re.compile(' +')\n",
    "\n",
    "def test_globals():\n",
    "    \"\"\"This function tests that the test globals are properly defined.\n",
    "    \"\"\"\n",
    "    #assert that digits are removed\n",
    "    assert re_dig.search(DIGITS) != None, \"global doesn't contain digits!\" \n",
    "    #assert that punctutation is removed\n",
    "    assert re_punct.search(PUNCT) != None, \"global doesn't contain punctuation!\"\n",
    "    #assert that excessive whitespace is removed\n",
    "    assert re_white.search(SPACE) != None, \"global doesn't contain whitespace!\"\n",
    "    \n",
    "\n",
    "def test_clean_text():\n",
    "    \"\"\"This function tests that the clean text function is doing its job.\n",
    "    \"\"\"\n",
    "    #assert that digits are removed\n",
    "    assert re_dig.search(prep.clean_text(DIGITS)) == None, \"clean_text did not remove the digits from test global.\" \n",
    "    #assert that punctutation is removed\n",
    "    assert re_punct.search(prep.clean_text(PUNCT)) == None, \"clean_text did not remove the punctuation from test global.\"\n",
    "    #assert that excessive whitespace is removed\n",
    "    assert re_white.search(prep.clean_text(SPACE)) == None, \"clean_text did not remove the whitespace from test global.\"\n",
    "\n",
    "# This is our base dataset and it needs to be cleaned properly. The second argument specifies\n",
    "# the cols with string values that we want to be cleaned.\n",
    "\n",
    "\n",
    "#TODO, how to cause read_then_clean to raise the row count exception??\n",
    "def test_read_then_clean():\n",
    "    \"\"\"This function tests that a custom exception called RowCountException\n",
    "    will be returned when more than 1k rows are expected.\n",
    "    \"\"\"\n",
    "    with pytest.raises(Exception) as err:\n",
    "        test_df = prep.read_then_clean(FILEPATH,\n",
    "                                       CLEAN_COLS)\n",
    "    assert 'RowCountException' in str(err) #verify that your custom error is returned"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#define test globals\n",
    "DIGITS = str([str(x) for x in range(100 + 1)])\n",
    "PUNCT = '!\"\\'#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~\\t\\n'\n",
    "SPACE = '     '\n",
    "\n",
    "# if you compile the regex string first, it's even faster\n",
    "re_dig = re.compile('\\d')\n",
    "re_punct = re.compile('\\W+')\n",
    "re_white = re.compile(' +')\n",
    "\n",
    "def test_globals():\n",
    "    \"\"\"This function tests that the test globals are properly defined.\n",
    "    \"\"\"\n",
    "    #assert that digits are removed\n",
    "    assert re_dig.search(DIGITS) != None, \"Global doesn't contain digits!\" \n",
    "    #assert that punctutation is removed\n",
    "    assert re_punct.search(PUNCT) != None, \"Global doesn't contain punctuation!\"\n",
    "    #assert that excessive whitespace is removed\n",
    "    assert re_white.search(SPACE) != None, \"Global doesn't contain whitespace!\"\n",
    "    \n",
    "\n",
    "def test_clean_text():\n",
    "    \"\"\"This function tests that the clean text function is doing its job.\n",
    "    \"\"\"\n",
    "    #assert that digits are removed\n",
    "    assert re_dig.search(prep.clean_text(DIGITS)) == None, \"clean_text did not remove the digits from test global.\" \n",
    "    #assert that punctutation is removed\n",
    "    assert re_punct.search(prep.clean_text(PUNCT)) == None, \"clean_text did not remove the punctuation from test global.\"\n",
    "    #assert that excessive whitespace is removed\n",
    "    assert re_white.search(prep.clean_text(SPACE)) == None, \"clean_text did not remove the whitespace from test global.\""
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
